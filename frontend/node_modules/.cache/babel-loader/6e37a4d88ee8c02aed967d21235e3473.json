{"ast":null,"code":"import { API_URL } from '../../api';\nimport generateJsonFormData from '../utils/convertFormToJson';\nimport getToken from '../utils/getToken';\nexport const all = payload => {\n  return {\n    type: 'news/all',\n    payload: payload\n  };\n};\nexport const byId = payload => {\n  return {\n    type: 'news/byId',\n    payload: payload\n  };\n};\nexport const create = payload => {\n  return {\n    type: 'news/create',\n    payload: payload\n  };\n};\nexport const maxOffset = offset => {\n  return {\n    type: 'offset/max',\n    payload: offset\n  };\n};\nexport const reset = () => {\n  return {\n    type: 'reset'\n  };\n};\nexport const setLastPostsNumber = payload => {\n  return {\n    type: 'set/totalPosts',\n    payload: payload\n  };\n};\nexport const setOffset = offset => {\n  return {\n    type: 'offset/add',\n    payload: offset\n  };\n};\nexport const setForm = payload => {\n  return {\n    type: 'set/form',\n    payload: payload\n  };\n};\nexport const setToken = payload => {\n  return {\n    type: 'auth/token',\n    payload: payload\n  };\n};\nexport const maxOffsetThunk = () => async dispatch => {\n  try {\n    const rawData = await fetch(API_URL + 'post/offset', {\n      method: 'GET'\n    });\n    const response = await rawData.json();\n    dispatch(maxOffset(response));\n  } catch (e) {\n    dispatch(maxOffset(0));\n  }\n};\nexport const someThunk = offset => async dispatch => {\n  try {\n    const rawData = await fetch(API_URL + `post/some?q=${offset}`, {\n      method: 'GET'\n    });\n    const response = await rawData.json();\n\n    if (response.length > 0) {\n      return dispatch(all(response));\n    }\n\n    dispatch(all([0]));\n  } catch (e) {\n    dispatch(all([0]));\n  }\n};\nexport const createUserThunk = myform => async dispatch => {\n  try {\n    const form = new FormData(myform);\n    const rawRequestBody = generateJsonFormData(form, ['displayName', 'email', 'password']);\n    const requestBody = JSON.stringify(rawRequestBody);\n    const headers = new Headers();\n    headers.set('Content-type', 'application/json');\n    const rawData = await fetch(API_URL + `user`, {\n      method: 'POST',\n      headers,\n      body: requestBody\n    });\n    const {\n      token\n    } = await rawData.json();\n\n    if (token) {\n      localStorage.setItem('token', token);\n      dispatch(setToken(true));\n      dispatch(create());\n      return;\n    }\n  } catch (e) {\n    dispatch(setToken(false));\n    console.log(e);\n  }\n};\nexport const byIdThunk = id => async dispatch => {\n  try {\n    const rawData = await fetch(`${API_URL}${id}`, {\n      method: 'GET'\n    });\n    const response = await rawData.json();\n    dispatch(byId(response));\n  } catch (e) {\n    console.log(e);\n  }\n};\nexport const createThunk = myForm => async dispatch => {\n  try {\n    const token = await getToken();\n    const form = new FormData(myForm);\n    const rawRequestBody = generateJsonFormData(form, ['content', 'categories', 'title']);\n\n    if (rawRequestBody.categories) {\n      rawRequestBody.categories = rawRequestBody.categories.split(',');\n    } else {\n      rawRequestBody.categories = [];\n    }\n\n    const requestBody = JSON.stringify(rawRequestBody);\n    const headers = new Headers();\n    headers.set('authorization', token);\n    headers.set('Content-type', 'application/json');\n    await fetch(API_URL + 'post/', {\n      method: 'post',\n      body: requestBody,\n      headers,\n      mode: 'cors'\n    });\n    dispatch(create());\n  } catch (e) {\n    dispatch(create(e));\n  }\n};","map":{"version":3,"names":["API_URL","generateJsonFormData","getToken","all","payload","type","byId","create","maxOffset","offset","reset","setLastPostsNumber","setOffset","setForm","setToken","maxOffsetThunk","dispatch","rawData","fetch","method","response","json","e","someThunk","length","createUserThunk","myform","form","FormData","rawRequestBody","requestBody","JSON","stringify","headers","Headers","set","body","token","localStorage","setItem","console","log","byIdThunk","id","createThunk","myForm","categories","split","mode"],"sources":["/home/hitsuri/blog-post-final/frontend/src/redux/action/news.js"],"sourcesContent":["import { API_URL } from '../../api';\nimport generateJsonFormData from '../utils/convertFormToJson';\nimport getToken from '../utils/getToken';\n\nexport const all = (payload) => {\n  return {\n    type: 'news/all',\n    payload: payload,\n  };\n};\n\nexport const byId = (payload) => {\n  return {\n    type: 'news/byId',\n    payload: payload,\n  };\n};\n\nexport const create = (payload) => {\n  return {\n    type: 'news/create',\n    payload: payload,\n  };\n};\n\nexport const maxOffset = (offset) => {\n  return {\n    type: 'offset/max',\n    payload: offset,\n  };\n};\n\nexport const reset = () => {\n  return {\n    type: 'reset',\n  };\n};\n\nexport const setLastPostsNumber = (payload) => {\n  return {\n    type: 'set/totalPosts',\n    payload: payload,\n  };\n};\n\nexport const setOffset = (offset) => {\n  return {\n    type: 'offset/add',\n    payload: offset,\n  };\n};\n\nexport const setForm = (payload) => {\n  return {\n    type: 'set/form',\n    payload: payload,\n  };\n};\n\nexport const setToken = (payload) => {\n  return {\n    type: 'auth/token',\n    payload: payload,\n  };\n};\n\nexport const maxOffsetThunk = () => async (dispatch) => {\n  try {\n    const rawData = await fetch(API_URL + 'post/offset', {\n      method: 'GET',\n    });\n\n    const response = await rawData.json();\n\n    dispatch(maxOffset(response));\n  } catch (e) {\n    dispatch(maxOffset(0));\n  }\n};\n\nexport const someThunk = (offset) => async (dispatch) => {\n  try {\n    const rawData = await fetch(API_URL + `post/some?q=${offset}`, {\n      method: 'GET',\n    });\n\n    const response = await rawData.json();\n    if (response.length > 0) {\n      return dispatch(all(response));\n    }\n    dispatch(all([0]));\n  } catch (e) {\n    dispatch(all([0]));\n  }\n};\n\nexport const createUserThunk = (myform) => async (dispatch) => {\n  try {\n    const form = new FormData(myform);\n    const rawRequestBody = generateJsonFormData(form, [\n      'displayName',\n      'email',\n      'password',\n    ]);\n    const requestBody = JSON.stringify(rawRequestBody);\n    const headers = new Headers();\n    headers.set('Content-type', 'application/json');\n    const rawData = await fetch(API_URL + `user`, {\n      method: 'POST',\n      headers,\n      body: requestBody,\n    });\n    const { token } = await rawData.json();\n    if (token) {\n      localStorage.setItem('token', token);\n      dispatch(setToken(true));\n      dispatch(create());\n      return;\n    }\n  } catch (e) {\n    dispatch(setToken(false));\n    console.log(e);\n  }\n};\n\nexport const byIdThunk = (id) => async (dispatch) => {\n  try {\n    const rawData = await fetch(`${API_URL}${id}`, {\n      method: 'GET',\n    });\n\n    const response = await rawData.json();\n\n    dispatch(byId(response));\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nexport const createThunk = (myForm) => async (dispatch) => {\n  try {\n    const token = await getToken();\n    const form = new FormData(myForm);\n\n    const rawRequestBody = generateJsonFormData(form, [\n      'content',\n      'categories',\n      'title',\n    ]);\n    if(rawRequestBody.categories) {\n      rawRequestBody.categories = rawRequestBody.categories.split(',');\n    } else {\n      rawRequestBody.categories = [];\n    }\n    const requestBody = JSON.stringify(rawRequestBody);\n    const headers = new Headers();\n    headers.set('authorization', token);\n    headers.set('Content-type', 'application/json');\n    await fetch(API_URL + 'post/', {\n      method: 'post',\n      body: requestBody,\n      headers,\n      mode: 'cors',\n    });\n    dispatch(create());\n  } catch (e) {\n    dispatch(create(e));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}